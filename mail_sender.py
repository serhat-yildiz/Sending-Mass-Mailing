# -*- coding: utf-8 -*-
import sys
import os
import smtplib
import time
import html
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.header import Header
from email.utils import formataddr
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, 
    QTextEdit, QPushButton, QFileDialog, QMessageBox, 
    QProgressBar, QFrame, QGridLayout, QScrollArea,
    QApplication, QSizePolicy, QSpacerItem
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPixmap, QIcon
from dotenv import load_dotenv

class EmailSendingThread(QThread):
    """E-posta g√∂nderme i≈ülemini arka planda yapar"""
    progress_updated = pyqtSignal(int, str)
    finished_signal = pyqtSignal(int, int, str)
    error_signal = pyqtSignal(str)
    
    def __init__(self, email, password, recipients, subject, content, cv_path=None, is_html=False):
        super().__init__()
        self.email = email
        self.password = password
        self.recipients = recipients
        self.subject = subject
        self.content = content
        self.cv_path = cv_path
        self.is_html = is_html
        self.is_cancelled = False
    
    def cancel(self):
        self.is_cancelled = True
    
    def run(self):
        successful_sends = 0
        failed_sends = 0
        error_message = ""
        
        try:
            # Gmail SMTP sunucusuna baƒülan
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.ehlo()
            server.starttls()
            server.ehlo()
            
            # Kimlik doƒürulama
            server.login(self.email, self.password)
            
            for i, recipient in enumerate(self.recipients):
                if self.is_cancelled:
                    break
                
                try:
                    # Her 10 e-postada bir 1 dakika bekle (rate limiting)
                    if i > 0 and i % 10 == 0:
                        for j in range(60):
                            if self.is_cancelled:
                                break
                            time.sleep(1)
                    
                    # HTML formatƒ±nda mesaj olu≈ütur
                    msg = MIMEMultipart()
                    msg['From'] = formataddr(('G√∂nderen', self.email))
                    msg['To'] = recipient
                    msg['Subject'] = self.subject
                    
                    # HTML i√ßeriƒüi aynen kullan
                    html_content = self.content
                    
                    text_part = MIMEText(html_content, 'html', 'utf-8')
                    msg.attach(text_part)
                    
                    # CV dosyasƒ± varsa ekle
                    if self.cv_path and os.path.exists(self.cv_path):
                        with open(self.cv_path, 'rb') as f:
                            cv_part = MIMEApplication(f.read(), _subtype='pdf')
                            cv_part.add_header('Content-Disposition', 'attachment', 
                                             filename=os.path.basename(self.cv_path))
                            msg.attach(cv_part)
                    
                    # Maili g√∂nder
                    server.sendmail(self.email, recipient, msg.as_string())
                    successful_sends += 1
                    
                    # Progress g√ºncelle
                    self.progress_updated.emit(i + 1, f"G√∂nderildi: {recipient}")
                    
                except Exception as e:
                    failed_sends += 1
                    error_message += f"Hata ({recipient}): {str(e)}\n"
                    continue
            
            server.quit()
            self.finished_signal.emit(successful_sends, failed_sends, error_message)
            
        except smtplib.SMTPAuthenticationError:
            self.error_signal.emit("Kimlik doƒürulama hatasƒ±! E-posta veya uygulama ≈üifrenizi kontrol edin.")
        except Exception as e:
            self.error_signal.emit(f"Baƒülantƒ± hatasƒ±: {str(e)}")
    
    def text_to_html(self, text):
        """Metni HTML formatƒ±na √ßevirir, satƒ±r sonlarƒ±nƒ± ve bo≈üluklarƒ± korur"""
        # HTML karakterlerini escape et
        escaped_text = html.escape(text)
        
        # Satƒ±r sonlarƒ±nƒ± <br> ile deƒüi≈ütir
        html_text = escaped_text.replace('\n', '<br>\n')
        
        # √áoklu bo≈üluklarƒ± korumak i√ßin &nbsp; kullan
        import re
        # 2 veya daha fazla bo≈üluƒüu &nbsp; ile deƒüi≈ütir
        html_text = re.sub(r' {2,}', lambda m: '&nbsp;' * len(m.group()), html_text)
        
        # Tab karakterlerini 4 bo≈ülukla deƒüi≈ütir
        html_text = html_text.replace('\t', '&nbsp;&nbsp;&nbsp;&nbsp;')
        
        # HTML yapƒ±sƒ± ile sarmayla
        html_content = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {{
            font-family: Arial, sans-serif;
            font-size: 14px;
            line-height: 1.8;
            color: #333;
            margin: 20px;
            background-color: #ffffff;
        }}
        .content {{
            white-space: pre-wrap;
            word-wrap: break-word;
            max-width: 100%;
        }}
        p {{
            margin: 0 0 10px 0;
        }}
        .signature {{
            margin-top: 20px;
            border-top: 1px solid #eee;
            padding-top: 15px;
        }}
    </style>
</head>
<body>
    <div class="content">{html_text}</div>
</body>
</html>"""
        
        return html_content
    
    def process_html_content(self, content):
        """HTML i√ßeriƒüini i≈üler"""
        # Eƒüer tam HTML yapƒ±sƒ± yoksa, temel yapƒ±yƒ± ekle
        if '<html>' not in content.lower() and '<body>' not in content.lower():
            processed_html = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {{
            font-family: Arial, sans-serif;
            font-size: 14px;
            line-height: 1.6;
            color: #333;
            margin: 20px;
            background-color: #ffffff;
        }}
        .container {{
            max-width: 600px;
            margin: 0 auto;
        }}
    </style>
</head>
<body>
    <div class="container">
        {content}
    </div>
</body>
</html>"""
        else:
            processed_html = content
        
        return processed_html

class ModernMailSender(QWidget):
    def __init__(self):
        super().__init__()
        self.cv_path = None
        self.email_thread = None
        self.content_mode = 'html'  # Sadece HTML modu
        self.init_ui()
        self.load_settings()
        
    def init_ui(self):
        """Modern UI olu≈üturur"""
        # Ana layout
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(20)
        main_layout.setContentsMargins(30, 30, 30, 30)
        
        # Title
        title_label = QLabel("üåê HTML Email Template Sender")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #27ae60;
                margin-bottom: 10px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px;
                border-radius: 10px;
                text-align: center;
            }
        """)
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)
        
        # Create scroll area
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setFrameShape(QFrame.NoFrame)
        
        # Main content widget
        content_widget = QWidget()
        content_layout = QVBoxLayout(content_widget)
        content_layout.setSpacing(25)
        
        # Gmail settings section
        gmail_frame = self.create_section_frame("Gmail Settings")
        gmail_layout = QGridLayout()
        
        # Email address
        email_label = QLabel("Your Gmail Address:")
        email_label.setStyleSheet("color: #2c3e50; background-color: transparent;")
        gmail_layout.addWidget(email_label, 0, 0)
        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("example@gmail.com")
        self.style_input(self.email_input)
        gmail_layout.addWidget(self.email_input, 0, 1)
        
        # App password
        password_label = QLabel("Your App Password:")
        password_label.setStyleSheet("color: #2c3e50; background-color: transparent;")
        gmail_layout.addWidget(password_label, 1, 0)
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("Your 16-digit app password")
        self.style_input(self.password_input)
        gmail_layout.addWidget(self.password_input, 1, 1)
        
        # Help button
        help_btn = QPushButton("How to Get App Password?")
        help_btn.clicked.connect(self.show_help)
        self.style_button(help_btn, "#3498db")
        gmail_layout.addWidget(help_btn, 2, 0, 1, 2)
        
        gmail_frame.setLayout(gmail_layout)
        content_layout.addWidget(gmail_frame)
        
        # Recipients list section
        recipients_frame = self.create_section_frame("Recipients List")
        recipients_layout = QVBoxLayout()
        
        recipients_label = QLabel("Email addresses (one per line):")
        recipients_label.setStyleSheet("color: #2c3e50; background-color: transparent;")
        recipients_layout.addWidget(recipients_label)
        
        self.recipients_input = QTextEdit()
        self.recipients_input.setPlaceholderText("example1@gmail.com\nexample2@gmail.com\nexample3@gmail.com")
        self.recipients_input.setMaximumHeight(120)
        self.style_text_input(self.recipients_input)
        recipients_layout.addWidget(self.recipients_input)
        
        recipients_frame.setLayout(recipients_layout)
        content_layout.addWidget(recipients_frame)
        
        # Email content section
        content_frame = self.create_section_frame("Email Content")
        content_mail_layout = QVBoxLayout()
        
        # Subject
        subject_layout = QHBoxLayout()
        subject_label = QLabel("Subject:")
        subject_label.setStyleSheet("color: #2c3e50; background-color: transparent;")
        subject_layout.addWidget(subject_label)
        self.subject_input = QLineEdit()
        self.subject_input.setPlaceholderText("Enter your email subject here")
        self.style_input(self.subject_input)
        subject_layout.addWidget(self.subject_input)
        content_mail_layout.addLayout(subject_layout)
        
        # Information
        info_label = QLabel("üåê HTML Email Template Sender")
        info_label.setStyleSheet("""
            QLabel {
                color: #27ae60;
                font-size: 16px;
                font-weight: bold;
                background-color: #e8f5e8;
                padding: 10px;
                border-radius: 5px;
                border-left: 4px solid #27ae60;
            }
        """)
        content_mail_layout.addWidget(info_label)
        
        # HTML Template area
        content_input_label = QLabel("Your HTML Email Template:")
        content_input_label.setStyleSheet("color: #2c3e50; background-color: transparent; font-weight: bold;")
        content_mail_layout.addWidget(content_input_label)
        
        self.content_input = QTextEdit()
        self.content_input.setMinimumHeight(300)
        self.content_input.setAcceptRichText(False)  # Sadece d√ºz metin kabul et
        self.content_input.setLineWrapMode(QTextEdit.WidgetWidth)  # Kelime kaydƒ±rma
        self.content_input.setPlaceholderText(self.get_html_placeholder())
        self.style_html_input(self.content_input)
        content_mail_layout.addWidget(self.content_input)
        
        # Kullanƒ±m talimatlarƒ±
        instructions_frame = self.create_instructions_frame()
        content_mail_layout.addWidget(instructions_frame)
        
        # Ara√ßlar
        tools_layout = QHBoxLayout()
        
        # √ñnizleme butonu
        preview_btn = QPushButton("üîç HTML √ñnizleme")
        preview_btn.clicked.connect(self.preview_content)
        self.style_button(preview_btn, "#f39c12")
        tools_layout.addWidget(preview_btn)
        
        # √ñrnek ≈üablon butonu
        example_btn = QPushButton("üìÑ √ñrnek ≈ûablon Y√ºkle")
        example_btn.clicked.connect(self.load_example_template)
        self.style_button(example_btn, "#9b59b6")
        tools_layout.addWidget(example_btn)
        
        # Temizle butonu
        clear_btn = QPushButton("üóëÔ∏è Temizle")
        clear_btn.clicked.connect(self.clear_content)
        self.style_button(clear_btn, "#e74c3c")
        tools_layout.addWidget(clear_btn)
        
        content_mail_layout.addLayout(tools_layout)
        
        content_frame.setLayout(content_mail_layout)
        content_layout.addWidget(content_frame)
        
        # CV ekleme b√∂l√ºm√º
        cv_frame = self.create_section_frame("CV Ekleme (ƒ∞steƒüe Baƒülƒ±)")
        cv_layout = QHBoxLayout()
        
        self.cv_label = QLabel("CV se√ßilmedi")
        cv_layout.addWidget(self.cv_label)
        
        cv_btn = QPushButton("CV Se√ß")
        cv_btn.clicked.connect(self.select_cv)
        self.style_button(cv_btn, "#9b59b6")
        cv_layout.addWidget(cv_btn)
        
        cv_clear_btn = QPushButton("CV'yi Kaldƒ±r")
        cv_clear_btn.clicked.connect(self.clear_cv)
        self.style_button(cv_clear_btn, "#e74c3c")
        cv_layout.addWidget(cv_clear_btn)
        
        cv_frame.setLayout(cv_layout)
        content_layout.addWidget(cv_frame)
        
        # G√∂nderme b√∂l√ºm√º
        send_frame = self.create_section_frame("G√∂nderme")
        send_layout = QVBoxLayout()
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                text-align: center;
                font-weight: bold;
            }
            QProgressBar::chunk {
                background-color: #27ae60;
                border-radius: 6px;
            }
        """)
        send_layout.addWidget(self.progress_bar)
        
        # Durum etiketi
        self.status_label = QLabel("")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #7f8c8d; font-style: italic;")
        send_layout.addWidget(self.status_label)
        
        # G√∂nder butonu
        self.send_btn = QPushButton("üìß E-postalarƒ± G√∂nder")
        self.send_btn.clicked.connect(self.send_emails)
        self.send_btn.setMinimumHeight(50)
        self.send_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                padding: 10px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:pressed {
                background-color: #229954;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
            }
        """)
        send_layout.addWidget(self.send_btn)
        
        # ƒ∞ptal butonu
        self.cancel_btn = QPushButton("ƒ∞ptal Et")
        self.cancel_btn.clicked.connect(self.cancel_sending)
        self.cancel_btn.setVisible(False)
        self.style_button(self.cancel_btn, "#e74c3c")
        send_layout.addWidget(self.cancel_btn)
        
        send_frame.setLayout(send_layout)
        content_layout.addWidget(send_frame)
        
        # Spacer ekle
        content_layout.addSpacerItem(QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding))
        
        # Scroll area'ya ekle
        scroll.setWidget(content_widget)
        main_layout.addWidget(scroll)
    
    def create_section_frame(self, title):
        """B√∂l√ºm frame'i olu≈üturur"""
        frame = QFrame()
        frame.setFrameShape(QFrame.Box)
        frame.setFrameShadow(QFrame.Raised)
        frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 2px solid #ecf0f1;
                border-radius: 10px;
                padding: 15px;
            }
            QFrame QLabel {
                color: #2c3e50;
                font-weight: bold;
                background-color: transparent;
            }
        """)
        
        # Ba≈ülƒ±k ekle
        layout = QVBoxLayout()
        title_label = QLabel(title)
        title_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #34495e;
                margin-bottom: 10px;
                border: none;
                background-color: transparent;
            }
        """)
        layout.addWidget(title_label)
        
        return frame
    
    def style_input(self, widget):
        """Input alanlarƒ±nƒ± stillendirir"""
        widget.setStyleSheet("""
            QLineEdit {
                padding: 10px;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                font-size: 14px;
                background-color: #f8f9fa;
                color: #2c3e50;
            }
            QLineEdit:focus {
                border-color: #3498db;
                background-color: white;
                color: #2c3e50;
            }
        """)
    
    def style_text_input(self, widget):
        """Text input alanlarƒ±nƒ± stillendirir"""
        widget.setStyleSheet("""
            QTextEdit {
                padding: 12px;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                font-size: 14px;
                background-color: #f8f9fa;
                color: #2c3e50;
                font-family: 'Courier New', 'Monaco', monospace;
                line-height: 1.5;
                selection-background-color: #3498db;
                selection-color: white;
            }
            QTextEdit:focus {
                border-color: #3498db;
                background-color: white;
                color: #2c3e50;
            }
        """)
    
    def style_button(self, button, color):
        """Butonlarƒ± stillendirir"""
        button.setStyleSheet(f"""
            QPushButton {{
                background-color: {color};
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
                padding: 10px 20px;
                min-height: 20px;
            }}
            QPushButton:hover {{
                background-color: {self.darken_color(color)};
            }}
            QPushButton:pressed {{
                background-color: {self.darken_color(color, 0.2)};
            }}
        """)
    
    def darken_color(self, color, factor=0.1):
        """Rengi koyula≈ütƒ±rƒ±r"""
        color_map = {
            "#3498db": "#2980b9",
            "#9b59b6": "#8e44ad", 
            "#e74c3c": "#c0392b",
            "#27ae60": "#229954",
            "#f39c12": "#e67e22",
            "#e67e22": "#d35400",
            "#95a5a6": "#7f8c8d"
        }
        return color_map.get(color, color)
    
    def show_help(self):
        """Yardƒ±m mesajƒ±nƒ± g√∂sterir"""
        QMessageBox.information(self, "Uygulama ≈ûifresi Yardƒ±mƒ±", 
            "Gmail i√ßin uygulama ≈üifresi olu≈üturmak i√ßin:\n\n"
            "1. https://myaccount.google.com/security adresine gidin\n"
            "2. '2 Adƒ±mlƒ± Doƒürulama'yƒ± etkinle≈ütirin\n"
            "3. 'Uygulama ≈ûifreleri'ne gidin\n"
            "4. 'Uygulama Se√ß' > 'Diƒüer' > 'Mail Uygulamasƒ±'\n"
            "5. Olu≈üturulan 16 haneli ≈üifreyi kopyalayƒ±n\n\n"
            "Not: Normal Gmail ≈üifrenizi DEƒûƒ∞L, √∂zel uygulama ≈üifresini kullanmalƒ±sƒ±nƒ±z!")

    def select_cv(self):
        """CV dosyasƒ± se√ßer"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "CV Dosyasƒ± Se√ß", "", "PDF Dosyalar (*.pdf)")
        
        if file_path:
            self.cv_path = file_path
            self.cv_label.setText(f"CV: {os.path.basename(file_path)}")
            self.cv_label.setStyleSheet("color: #27ae60; font-weight: bold;")
    
    def clear_cv(self):
        """CV dosyasƒ±nƒ± kaldƒ±rƒ±r"""
        self.cv_path = None
        self.cv_label.setText("CV se√ßilmedi")
        self.cv_label.setStyleSheet("color: #7f8c8d;")
    
    def get_html_placeholder(self):
        """HTML placeholder metnini d√∂nd√ºr√ºr"""
        return """HTML ≈üablonunuzu buraya yapƒ±≈ütƒ±rƒ±n...

<!-- √ñNERƒ∞LEN ≈ûABLON YAPISI -->
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>E-posta</title>
</head>
<body>
    <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;">
        <h1 style="color: #2c3e50;">Ba≈ülƒ±ƒüƒ±nƒ±z</h1>
        <p>ƒ∞√ßeriƒüiniz...</p>
    </div>
</body>
</html>

<!-- VEYA BASIT HTML -->
<h1 style="color: #2c3e50;">Ba≈ülƒ±ƒüƒ±nƒ±z</h1>
<p>ƒ∞√ßeriƒüiniz...</p>
<ul>
    <li>Liste √∂ƒüesi 1</li>
    <li>Liste √∂ƒüesi 2</li>
</ul>

üí° ƒ∞PUCU: Yapƒ±≈ütƒ±rdƒ±ƒüƒ±nƒ±z HTML aynen g√∂nderilecektir."""
    
    def style_html_input(self, widget):
        """HTML input alanƒ±nƒ± stillendirir"""
        widget.setStyleSheet("""
            QTextEdit {
                padding: 15px;
                border: 2px solid #3498db;
                border-radius: 8px;
                font-size: 12px;
                background-color: #f8f9fa;
                color: #2c3e50;
                font-family: 'Courier New', 'Monaco', monospace;
                line-height: 1.4;
            }
            QTextEdit:focus {
                border-color: #e67e22;
                background-color: white;
            }
        """)
    
    def create_instructions_frame(self):
        """Kullanƒ±m talimatlarƒ± frame'i olu≈üturur"""
        frame = QFrame()
        frame.setFrameShape(QFrame.Box)
        frame.setFrameShadow(QFrame.Raised)
        frame.setStyleSheet("""
            QFrame {
                background-color: #e8f4fd;
                border: 2px solid #3498db;
                border-radius: 10px;
                padding: 15px;
                margin: 10px 0;
            }
        """)
        
        layout = QVBoxLayout(frame)
        
        # Ba≈ülƒ±k
        title = QLabel("üìã HTML ≈ûablon Kullanƒ±m Talimatlarƒ±")
        title.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 10px;
            }
        """)
        layout.addWidget(title)
        
        # Talimatlar
        instructions = QLabel("""
1. üé® HTML ≈üablonunuzu yukarƒ±daki alana yapƒ±≈ütƒ±rƒ±n
2. üîç "HTML √ñnizleme" butonuyla nasƒ±l g√∂z√ºkeceƒüini kontrol edin  
3. üìß E-posta adreslerinizi ve konuyu girin
4. üöÄ "E-postalarƒ± G√∂nder" butonuna tƒ±klayƒ±n

‚ö†Ô∏è √ñNEMLƒ∞: Yapƒ±≈ütƒ±rdƒ±ƒüƒ±nƒ±z HTML kodu hi√ß deƒüi≈ütirilmeden aynen g√∂nderilir!
üí° ƒ∞PUCU: "√ñrnek ≈ûablon Y√ºkle" butonuyla hazƒ±r √∂rnekleri deneyebilirsiniz.
        """)
        instructions.setStyleSheet("""
            QLabel {
                color: #34495e;
                font-size: 12px;
                line-height: 1.6;
                background-color: transparent;
            }
        """)
        layout.addWidget(instructions)
        
        return frame
    
    def load_example_template(self):
        """√ñrnek HTML ≈üablonu y√ºkler"""
        example_html = """<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ƒ∞≈ü Ba≈üvurusu</title>
</head>
<body style="margin: 0; padding: 20px; font-family: Arial, sans-serif; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
        
        <!-- Header -->
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center;">
            <h1 style="margin: 0; font-size: 28px;">Serhat Yƒ±ldƒ±z</h1>
            <p style="margin: 5px 0 0 0; font-size: 18px; opacity: 0.9;">Frontend Developer</p>
        </div>
        
        <!-- Content -->
        <div style="padding: 30px;">
            <p style="font-size: 16px; line-height: 1.6; color: #333;">Merhaba,</p>
            
            <p style="font-size: 14px; line-height: 1.6; color: #555;">
                Modern web teknolojileriyle kullanƒ±cƒ± odaklƒ±, √∂l√ßeklenebilir ve y√ºksek performanslƒ± aray√ºzler geli≈ütiren bir Frontend Developer'ƒ±m. ≈ûirketinizdeki uygun pozisyonlar i√ßin deƒüerlendirilmekten memnuniyet duyarƒ±m.
            </p>
            
            <!-- Skills -->
            <div style="margin: 25px 0;">
                <h3 style="color: #4a5568; border-bottom: 2px solid #edf2f7; padding-bottom: 10px; margin-bottom: 15px;">Uzmanlƒ±k Alanlarƒ±m</h3>
                <div style="display: flex; flex-wrap: wrap; gap: 8px;">
                    <span style="background: #3182ce; color: white; padding: 6px 12px; border-radius: 15px; font-size: 12px; display: inline-block;">React & Next.js</span>
                    <span style="background: #38a169; color: white; padding: 6px 12px; border-radius: 15px; font-size: 12px; display: inline-block;">TypeScript</span>
                    <span style="background: #d69e2e; color: white; padding: 6px 12px; border-radius: 15px; font-size: 12px; display: inline-block;">Tailwind CSS</span>
                    <span style="background: #9f7aea; color: white; padding: 6px 12px; border-radius: 15px; font-size: 12px; display: inline-block;">Python</span>
                </div>
            </div>
            
            <!-- Contact -->
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h3 style="margin: 0 0 15px 0; color: #2d3748;">ƒ∞leti≈üim Bilgileri</h3>
                <p style="margin: 5px 0; color: #4a5568;">üìß <strong>E-posta:</strong> serhatgulcanyldz04@gmail.com</p>
                <p style="margin: 5px 0; color: #4a5568;">üì± <strong>Telefon:</strong> 0536 815 16 26</p>
                <p style="margin: 5px 0; color: #4a5568;">üîó <strong>Website:</strong> <a href="https://serhatdev.vercel.app" style="color: #3182ce;">serhatdev.vercel.app</a></p>
                <p style="margin: 5px 0; color: #4a5568;">üíº <strong>GitHub:</strong> <a href="https://github.com/serhat-yildiz" style="color: #3182ce;">github.com/serhat-yildiz</a></p>
            </div>
            
            <p style="font-size: 14px; line-height: 1.6; color: #555; margin-top: 25px;">
                Ekte CV'mi payla≈üƒ±yorum. Deƒüerlendirmeniz i√ßin te≈üekk√ºr ederim.
            </p>
            
            <p style="font-size: 14px; color: #666; margin-top: 20px;">
                ƒ∞yi √ßalƒ±≈ümalar dilerim,<br>
                <strong>Serhat Yƒ±ldƒ±z</strong>
            </p>
        </div>
        
        <!-- Footer -->
        <div style="background: #f1f5f9; padding: 20px; text-align: center; border-top: 1px solid #e2e8f0;">
            <p style="margin: 0; font-size: 12px; color: #718096;">
                Bu e-posta HTML ≈üablonu ile g√∂nderilmi≈ütir.
            </p>
        </div>
        
    </div>
</body>
</html>"""
        
        self.content_input.setPlainText(example_html)
        QMessageBox.information(self, "√ñrnek Y√ºklendi", 
            "Profesyonel i≈ü ba≈üvurusu ≈üablonu y√ºklendi!\n\n"
            "‚Ä¢ ƒ∞stediƒüiniz kƒ±sƒ±mlarƒ± d√ºzenleyebilirsiniz\n"
            "‚Ä¢ √ñnizleme ile kontrol edebilirsiniz\n"
            "‚Ä¢ Aynen bu ≈üekilde g√∂nderilecektir")
    
    def clear_content(self):
        """ƒ∞√ßeriƒüi temizler"""
        self.content_input.clear()
        QMessageBox.information(self, "Temizlendi", "HTML i√ßeriƒüi temizlendi.")
    

    
    def preview_content(self):
        """Mail i√ßeriƒüinin √∂nizlemesini g√∂sterir"""
        content = self.content_input.toPlainText().strip()
        
        if not content:
            QMessageBox.warning(self, "√ñnizleme", "√ñnce mail i√ßeriƒüi yazƒ±n!")
            return
        
        # HTML i√ßeriƒüi aynen kullan
        html_content = content
        
        # √ñnizleme penceresi olu≈ütur
        preview_dialog = QMessageBox(self)
        preview_dialog.setWindowTitle("Mail ƒ∞√ßerik √ñnizlemesi")
        preview_dialog.setText("Mail i√ßeriƒüiniz bu ≈üekilde g√∂z√ºkecek:")
        preview_dialog.setDetailedText(f"HTML Kodu:\n{html_content}")
        preview_dialog.setInformativeText(content[:500] + "..." if len(content) > 500 else content)
        preview_dialog.exec_()
    


    def send_emails(self):
        """E-posta g√∂nderme i≈ülemini ba≈ülatƒ±r"""
        # Girdi kontrol√º
        email = self.email_input.text().strip()
        password = self.password_input.text().strip()
        recipients_text = self.recipients_input.toPlainText().strip()
        subject = self.subject_input.text().strip()
        content = self.content_input.toPlainText().strip()
        
        if not all([email, password, recipients_text, subject, content]):
            QMessageBox.warning(self, "Eksik Bilgi", 
                "L√ºtfen t√ºm gerekli alanlarƒ± doldurun!")
            return
        
        # E-posta adreslerini ayƒ±kla
        recipients = [line.strip() for line in recipients_text.split('\n') 
                     if line.strip() and '@' in line]
        
        if not recipients:
            QMessageBox.warning(self, "Alƒ±cƒ± Hatasƒ±", 
                "Ge√ßerli e-posta adresi bulunamadƒ±!")
            return
        
        # Onay iste
        reply = QMessageBox.question(self, "Onay", 
            f"{len(recipients)} ki≈üiye e-posta g√∂ndermek istediƒüinizden emin misiniz?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        
            if reply == QMessageBox.No:
                return
        
        # UI'yi g√ºncelle
        self.send_btn.setEnabled(False)
        self.cancel_btn.setVisible(True)
        self.progress_bar.setVisible(True)
        self.progress_bar.setMaximum(len(recipients))
        self.progress_bar.setValue(0)
        self.status_label.setText("E-posta g√∂nderimi ba≈ülatƒ±lƒ±yor...")
        
        # Thread ba≈ülat (her zaman HTML modu)
        self.email_thread = EmailSendingThread(
            email, password, recipients, subject, content, self.cv_path, True)
        self.email_thread.progress_updated.connect(self.update_progress)
        self.email_thread.finished_signal.connect(self.sending_finished)
        self.email_thread.error_signal.connect(self.sending_error)
        self.email_thread.start()
    
    def cancel_sending(self):
        """E-posta g√∂nderimini iptal eder"""
        if self.email_thread:
            self.email_thread.cancel()
        self.reset_ui()
    
    def update_progress(self, value, status):
        """Progress bar'ƒ± g√ºnceller"""
        self.progress_bar.setValue(value)
        self.status_label.setText(status)
    
    def sending_finished(self, successful, failed, error_msg):
        """G√∂nderim tamamlandƒ±ƒüƒ±nda √ßalƒ±≈üƒ±r"""
        self.reset_ui()
        
        if failed == 0:
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                f"T√ºm e-postalar ba≈üarƒ±yla g√∂nderildi! ({successful} adet)")
            else:
                QMessageBox.warning(self, "Kƒ±smi Ba≈üarƒ±", 
                f"G√∂nderim sonucu:\n"
                f"‚úÖ Ba≈üarƒ±lƒ±: {successful} adet\n"
                f"‚ùå Ba≈üarƒ±sƒ±z: {failed} adet\n\n"
                f"Hata detaylarƒ±:\n{error_msg[:500]}{'...' if len(error_msg) > 500 else ''}")
    
    def sending_error(self, error_msg):
        """G√∂nderim hatasƒ± durumunda √ßalƒ±≈üƒ±r"""
        self.reset_ui()
        QMessageBox.critical(self, "Hata", f"E-posta g√∂nderilirken hata olu≈ütu:\n\n{error_msg}")
    
    def reset_ui(self):
        """UI'yi ba≈ülangƒ±√ß durumuna getirir"""
        self.send_btn.setEnabled(True)
        self.cancel_btn.setVisible(False)
        self.progress_bar.setVisible(False)
            self.progress_bar.setValue(0)
            self.status_label.setText("")
    
    def load_settings(self):
        """Ayarlarƒ± y√ºkler"""
        load_dotenv()
        saved_email = os.getenv('EMAIL', '')
        saved_password = os.getenv('PASSWORD', '')
        
        if saved_email:
            self.email_input.setText(saved_email)
        if saved_password:
            self.password_input.setText(saved_password)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    
    # Modern font ayarla (macOS uyumlu)
    font = QFont("Arial", 9)
    app.setFont(font)
    
    window = ModernMailSender()
    window.show()
    sys.exit(app.exec_()) 